import tkinter as tk
from tkinter import messagebox, simpledialog
import json
import os

FILE_NAME = "tasks.json"

class TodoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üìù My To-Do List")
        self.root.geometry("500x550")
        self.root.configure(bg="#F5F7FA")
        self.root.resizable(False, False)

        self.tasks = self.load_tasks()
        self.task_var = tk.StringVar()

        self.build_ui()
        self.display_tasks()

    def build_ui(self):
        tk.Label(self.root, text="My To-Do List", font=("Helvetica", 20, "bold"), bg="#F5F7FA", fg="#2E3A59").pack(pady=10)

        entry_frame = tk.Frame(self.root, bg="#F5F7FA")
        entry_frame.pack(pady=10)

        tk.Entry(entry_frame, textvariable=self.task_var, width=30, font=("Segoe UI", 12)).grid(row=0, column=0, padx=5)
        tk.Button(entry_frame, text="Add Task", width=10, bg="#4CAF50", fg="white", font=("Segoe UI", 10, "bold"), command=self.add_task).grid(row=0, column=1)

        self.listbox = tk.Listbox(self.root, width=45, height=12, font=("Segoe UI", 12), bg="#FFFFFF", fg="#333", bd=0, selectbackground="#D0E6FF", selectforeground="black")
        self.listbox.pack(pady=10)

        button_frame = tk.Frame(self.root, bg="#F5F7FA")
        button_frame.pack(pady=5)

        tk.Button(button_frame, text="‚úî Mark Done", width=15, bg="#2196F3", fg="white", command=self.mark_done).grid(row=0, column=0, padx=5, pady=5)
        tk.Button(button_frame, text="‚úèÔ∏è Edit Task", width=15, bg="#FFC107", fg="black", command=self.edit_task).grid(row=0, column=1, padx=5, pady=5)
        tk.Button(button_frame, text="üóë Delete Task", width=15, bg="#F44336", fg="white", command=self.delete_task).grid(row=1, column=0, padx=5, pady=5)
        tk.Button(button_frame, text="‚ùå Exit", width=15, bg="#607D8B", fg="white", command=self.exit_app).grid(row=1, column=1, padx=5, pady=5)

    def add_task(self):
        title = self.task_var.get().strip()
        if title:
            self.tasks.append({'title': title, 'done': False})
            self.task_var.set("")
            self.save_tasks()
            self.display_tasks()
        else:
            messagebox.showwarning("Warning", "Task cannot be empty!")

    def mark_done(self):
        selected = self.listbox.curselection()
        if selected:
            index = selected[0]
            self.tasks[index]["done"] = not self.tasks[index]["done"]
            self.save_tasks()
            self.display_tasks()
        else:
            messagebox.showinfo("Info", "Please select a task to mark as done.")

    def edit_task(self):
        selected = self.listbox.curselection()
        if selected:
            index = selected[0]
            new_title = simpledialog.askstring("Edit Task", "Update task:", initialvalue=self.tasks[index]["title"])
            if new_title:
                self.tasks[index]["title"] = new_title.strip()
                self.save_tasks()
                self.display_tasks()
        else:
            messagebox.showinfo("Info", "Please select a task to edit.")

    def delete_task(self):
        selected = self.listbox.curselection()
        if selected:
            confirm = messagebox.askyesno("Confirm", "Are you sure you want to delete this task?")
            if confirm:
                del self.tasks[selected[0]]
                self.save_tasks()
                self.display_tasks()
        else:
            messagebox.showinfo("Info", "Please select a task to delete.")

    def display_tasks(self):
        self.listbox.delete(0, tk.END)
        for task in self.tasks:
            status = "‚úî" if task['done'] else "‚úñ"
            self.listbox.insert(tk.END, f"[{status}] {task['title']}")

    def load_tasks(self):
        if os.path.exists(FILE_NAME):
            with open(FILE_NAME, 'r') as f:
                return json.load(f)
        return []

    def save_tasks(self):
        with open(FILE_NAME, 'w') as f:
            json.dump(self.tasks, f, indent=4)

    def exit_app(self):
        self.save_tasks()
        self.root.quit()

if __name__ == "__main__":
    root = tk.Tk()
    app = TodoApp(root)
    root.mainloop()
